<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 磊子的菜园子</title><link>https://blog.humblex.top/posts/</link><description>Recent content in Posts on 磊子的菜园子</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>hzleii@outlook.com (磊子)</managingEditor><webMaster>hzleii@outlook.com (磊子)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 07 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.humblex.top/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Java8 Stream 流操作</title><link>https://blog.humblex.top/stream/</link><pubDate>Tue, 07 Jun 2022 00:00:00 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/stream/</guid><description>什么是 Stream Stream翻译称为 “流”，是 Java8 的新特性之一。 Stream将要处理的元素看作是流，这时可以借助Stream API对流中的元素进行中间</description></item><item><title>Oracle 的使用</title><link>https://blog.humblex.top/oracle/</link><pubDate>Sat, 09 Oct 2021 20:36:44 +0800</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/oracle/</guid><description>简介 Oracle Database，又名 Oracle RDBMS，简称 Oracle。是甲骨文公司推出的一款关系数据库管理系统。 Oracle 数据库系统是目前世界上流行的关系数据</description></item><item><title>136.只出现一次的数字</title><link>https://blog.humblex.top/136_singlenumber/</link><pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/136_singlenumber/</guid><description>题目描述 给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次，找出那个只出现一次的元素 示例 1： 1 2 输入：[2, 2, 1] 输出：</description></item><item><title>141.环形链表</title><link>https://blog.humblex.top/141_linkedlistcycle/</link><pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/141_linkedlistcycle/</guid><description>141.环形链表</description></item><item><title>1480.一堆数组的动态和</title><link>https://blog.humblex.top/1480_runningsumof1darray/</link><pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/1480_runningsumof1darray/</guid><description>题目描述 给你一个数组 nums 。数组「动态和」的计算公式为： $$ \tt {runningSum[i] = sum(nums[0]…nums[i])} $$ 请返回$ \tt {nums} $的动态和。 示例 1： 1 2</description></item><item><title>1486.数组异或操作</title><link>https://blog.humblex.top/1486_xoroperation/</link><pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/1486_xoroperation/</guid><description>题目描述 给定两个整数，$ \tt{n} $和$ \tt{start} $。 数组$ \tt{nums} $定义为：$ \tt{nums[i] = start + 2 * i} $（下标从$ \tt{0} $开始）且$ \tt{n == nums.length} $。 请返回$ \tt{nums} $中所有元素按位异或（</description></item><item><title>182.查找重复的电子邮箱</title><link>https://blog.humblex.top/182_duplicateemails/</link><pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/182_duplicateemails/</guid><description>题目描述 编写一个 SQL 查询，查找 Person 表中重复的电子邮箱。 示例： 1 2 3 4 5 6 7 +----+---------+ | Id | Email | +----+---------+ | 1 | a@b.com | | 2 | c@d.com | | 3 | a@b.com | +----+---------+ 根据以上输入，你的查询应</description></item><item><title>184.部门工资最高的员工</title><link>https://blog.humblex.top/184_departmenthighestsalary/</link><pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/184_departmenthighestsalary/</guid><description>题目描述 Employee 表包含所有员工信息，每个员工有其对应的 Id, salary 和 department Id。 示例： 1 2 3 4 5 6 7 8 9 +----+-------+--------+--------------+ | Id | Name | Salary | DepartmentId | +----+-------+--------+--------------+ | 1 | Joe | 70000 | 1 | | 2 | Jim | 90000 |</description></item><item><title>195.第十行</title><link>https://blog.humblex.top/195_tenthline/</link><pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/195_tenthline/</guid><description>题目描述 给定一个文本文件 file.txt，请只打印这个文件中的第十行。 示例： 假设 file.txt 有如下内容： 1 2 3 4 5 6 7 8 9 10 Line 1 Line 2 Line 3 Line 4 Line 5 Line 6 Line</description></item><item><title>196.删除重复的电子邮箱</title><link>https://blog.humblex.top/196_deleteduplicateemails/</link><pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/196_deleteduplicateemails/</guid><description>题目描述 编写一个 SQL 查询，来删除 Person 表中所有重复的电子邮箱，重复的邮箱里只保留 Id 最小 的那个。 示例： 1 2 3 4 5 6 7 8 +----+------------------+ | Id | Email | +----+------------------+ | 1 | john@example.com | | 2 |</description></item><item><title>202.快乐数</title><link>https://blog.humblex.top/202_happynumber/</link><pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/202_happynumber/</guid><description>202.快乐数</description></item><item><title>204.计算质数</title><link>https://blog.humblex.top/204_countprimes/</link><pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/204_countprimes/</guid><description>题目描述 统计所有小于非负整数$ \tt{n} $的质数的数量 示例 1： 1 2 3 输入：n = 10 输出：4 解释：小于 10 的质数一共有4个，它们是 2，3，5，7 示例 2： 1</description></item><item><title>231.2的幂</title><link>https://blog.humblex.top/231_poweroftwo/</link><pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/231_poweroftwo/</guid><description>231.2的幂</description></item><item><title>283.移动零</title><link>https://blog.humblex.top/283_movezeroes/</link><pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/283_movezeroes/</guid><description>题目描述 给定一个数组 nums，编写一个函数将所有的 0 移动到数组的末尾，同时保持非零元素的相对顺序。 示例 1： 1 2 输入：[0, 1, 0, 3, 12] 输出：[1</description></item><item><title>342.4的幂</title><link>https://blog.humblex.top/342_poweroffour/</link><pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/342_poweroffour/</guid><description>描述 给定一个整数，写一个函数来判断它是否是4的幂次方。如果是，返回true，否则，返回false。 整数n是4的幂次方需满足：存在整数x使得$</description></item><item><title>509.斐波那契数</title><link>https://blog.humblex.top/509_fibonacci/</link><pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/509_fibonacci/</guid><description>描述 斐波那契数，通常用$ \tt{F(n)} $表示，形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是： 1 2 F(0) = 0，</description></item><item><title>596.超过5名学生的课</title><link>https://blog.humblex.top/596_classesmorethanfivestudents/</link><pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/596_classesmorethanfivestudents/</guid><description>题目描述 有一个 course 表，有：student (学生) 和 class (课程)。 请列出所有超过或等于5名学生的课。 示例： 1 2 3 4 5 6 7 8 9 10 11 12 13 +---------+------------+ | student | class | +---------+------------+</description></item><item><title>69.x的平方根</title><link>https://blog.humblex.top/69_sqrtx/</link><pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/69_sqrtx/</guid><description>69.x的平方根</description></item><item><title>709.转换成小写字母</title><link>https://blog.humblex.top/709_tolowercase/</link><pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/709_tolowercase/</guid><description>题目描述 实现函数 ToLowerCase()，该函数接收一个字符串参数 str，并将该字符串中的大写字母转换成小写字母，之后返回新的字符串。 示例</description></item><item><title>804.唯一的摩尔斯密码词</title><link>https://blog.humblex.top/804_uniquemorsecodewords/</link><pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/804_uniquemorsecodewords/</guid><description>题目描述 国际摩尔斯密码定义一种标准编码方式，将每个字母对应于一个由一系列点和短线组成的字符串，比如：&amp;ldquo;a&amp;rdquo; 对应 &amp;ld</description></item><item><title>9.回文数</title><link>https://blog.humblex.top/9_palindromenumber/</link><pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/9_palindromenumber/</guid><description>9.回文数</description></item><item><title>MySQL 行转列，列转行</title><link>https://blog.humblex.top/row2column/</link><pubDate>Tue, 08 Jun 2021 00:00:00 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/row2column/</guid><description>行转列 即将原本同一列下多行的不同内容作为多个字段，输出对应内容 测试数据 建表： 1 2 3 4 5 6 7 8 9 DROP TABLE IF EXISTS TB_SCORE; CREATE TABLE TB_SCORE ( ID INT ( 11 ) NOT NULL auto_increment, USER_ID VARCHAR ( 20 ) NOT</description></item><item><title>vi/vim 的基本用法</title><link>https://blog.humblex.top/viim/</link><pubDate>Wed, 03 Feb 2021 22:14:45 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/viim/</guid><description>vi/vim 的基本用法 简介 所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。 但是目前我们使用比较多的是 vim 编辑器。 vim 具有程序编辑的能力</description></item><item><title>JVM面试问题总结</title><link>https://blog.humblex.top/jvm%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</link><pubDate>Wed, 13 Jan 2021 22:15:45 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/jvm%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</guid><description>JVM 篇 1. 什么情况下会发生栈内存溢出 在 HotSpot 虚拟机中是不区分虚拟机栈和本地方法栈，栈是线程私有的，它的生命周期与线程相同，每个方法在执行的时候都会创</description></item><item><title>Linux 常用命令</title><link>https://blog.humblex.top/linuxinstruction/</link><pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/linuxinstruction/</guid><description>cd 1 2 3 4 5 cd （change directory：英文释义是改变目录）切换目录 cd ../ ;跳到上级目录 cd /opt ;不管现在到那直接跳到指定的opt文件夹中</description></item><item><title>Java-插入排序</title><link>https://blog.humblex.top/java-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</link><pubDate>Wed, 22 Jul 2020 21:01:24 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/java-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</guid><description>Java-插入排序（复杂度为O(n2) ） 简要说明 插入排序是一种最简单的排序方法，它的基本思想是从数组中逐个元素作为插入元素，和前面的进行比较</description></item><item><title>Java-选择排序</title><link>https://blog.humblex.top/java-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</link><pubDate>Wed, 22 Jul 2020 21:01:24 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/java-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</guid><description>Java-选择排序（时间复杂度为O(n²) ） 简要说明 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。 再从剩余未排序元素中继续</description></item><item><title>SpringCloud底层服务之间是怎样互相调用的</title><link>https://blog.humblex.top/springcloud%E5%BA%95%E5%B1%82%E6%9C%8D%E5%8A%A1%E4%B9%8B%E9%97%B4%E6%98%AF%E6%80%8E%E6%A0%B7%E4%BA%92%E7%9B%B8%E8%B0%83%E7%94%A8%E7%9A%84/</link><pubDate>Mon, 20 Jul 2020 23:40:32 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/springcloud%E5%BA%95%E5%B1%82%E6%9C%8D%E5%8A%A1%E4%B9%8B%E9%97%B4%E6%98%AF%E6%80%8E%E6%A0%B7%E4%BA%92%E7%9B%B8%E8%B0%83%E7%94%A8%E7%9A%84/</guid><description>SpringCloud底层服务之间是怎样互相调用的 ? 概述 毫无疑问，Spring Cloud是目前微服务架构领域的翘楚，无数的书籍博客都在讲解这</description></item><item><title>Java-快速排序</title><link>https://blog.humblex.top/java-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</link><pubDate>Mon, 20 Jul 2020 23:39:24 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/java-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</guid><description>Java-快速排序（时间复杂度：O(N*logN) ） 简要说明 快速排序由C. A. R. Hoare在1960年提出。 它的基本思想是：通过一趟排序将要排</description></item><item><title>Java-冒泡排序</title><link>https://blog.humblex.top/java-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</link><pubDate>Mon, 20 Jul 2020 21:00:24 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/java-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</guid><description>Java-冒泡排序 简要说明 依次比较两个相邻的元素 动图展示 代码展示 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 public class BubbleSort { public static void main(String[] args) { // TODO Auto-generated method stub int[] arr</description></item><item><title>CSS 知识总结</title><link>https://blog.humblex.top/css/</link><pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/css/</guid><description>行内元素与块元素 行内元素： 和其它元素布局在同一行 宽高不可控，默认为内部文字或图片的宽度 内外边距横向有效，纵向可设置但无实际效果 只能容纳文本或</description></item><item><title>Front End</title><link>https://blog.humblex.top/front-end/</link><pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/front-end/</guid><description>CSRF 和 XSS 攻击 CSRF 跨站请求伪造 用户访问并登陆 a.org a.org 生成并返回 Cookie 给用户 用户访问 b.org，其中有指向 a.org 的图片、链接和表单等 授权 Cookie 被发送给 a.org，造</description></item><item><title>JavaScript</title><link>https://blog.humblex.top/js/</link><pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/js/</guid><description>数据 数据类型 七种基本数据类型，一种复杂数据类型： number：+-(2^53-1) 范围内的数字 string：字符串 boolean：true 和</description></item><item><title>JS Insts</title><link>https://blog.humblex.top/js-insts/</link><pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/js-insts/</guid><description>工具函数 防抖与节流 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 /** * 防抖：仅执行一次 */ const debounce = &amp;lt;F extends (...args: any[]) =&amp;gt; any&amp;gt;(func: F, delay = 300) =&amp;gt; { let</description></item><item><title>React</title><link>https://blog.humblex.top/react/</link><pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/react/</guid><description>对比 Vue.js 数据更新 Vue：Vue 2 通过 getter、setter 与函数包裹；Vue 3 使用 Proxy；数据变化时自动更新显示 React：手动 setState 或通</description></item><item><title>Vue.js</title><link>https://blog.humblex.top/vuejs/</link><pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/vuejs/</guid><description>MVC 与 MVVM MVC： View 把操作转移到 Controller 处理 Controller 完成业务逻辑后，要求 Model 改变状态 Controller 通知 Model 将新的数据发送到 View MVVM： View 把操作转移到 VM 处理 VM 完成业务逻辑后，</description></item><item><title>Web</title><link>https://blog.humblex.top/web/</link><pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/web/</guid><description>OSI 七层与 TCP/IP 四层模型 OSI：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层 TCP/IP：数据链路层、网络层、传输层、应用层 物理层：</description></item><item><title>CS</title><link>https://blog.humblex.top/cs/</link><pubDate>Mon, 07 Jan 2019 00:00:00 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/cs/</guid><description>算法与数据结构 冒泡 / 选择 / 插入排序 冒泡排序： 从前往后比较相邻元素，如果第一个比第二个大，就交换 对每一对相邻元素作同样的工作，从开始第一对到结</description></item><item><title>191.位1的个数</title><link>https://blog.humblex.top/191_hammingweight/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>hzleii@outlook.com (磊子)</author><guid>https://blog.humblex.top/191_hammingweight/</guid><description>题目描述 编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 &amp;lsquo;1&amp;rsquo; 的个数（也被称为汉明重量）。 提示： 请注意，在</description></item></channel></rss>